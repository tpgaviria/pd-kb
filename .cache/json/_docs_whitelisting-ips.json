{"data":{"mdx":{"id":"046e205d-a913-53dd-ad35-7a93bd4873fd","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Whitelisting IPs\",\n  \"slug\": \"whitelisting-ips\",\n  \"excerpt\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"whitelisting-ips\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#whitelisting-ips\",\n    \"aria-label\": \"whitelisting ips permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Whitelisting IPs\"), mdx(\"h1\", null, \"Events APIs\"), mdx(\"p\", null, \"The PagerDuty \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://v2.developer.pagerduty.com/docs/events-api\"\n  }), \"Events APIs\"), \", which are used for triggering, acknowledging, and resolving incidents, requires that your system be able to make outbound connections to events.pagerduty.com on TCP port 443 (for HTTPS).\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"events.pagerduty.com\"), \" resolves to multiple IPs, which you can find by querying the A records using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dig\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nslookup\"), \".\"), mdx(\"h2\", {\n    \"id\": \"example-query-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#example-query-1\",\n    \"aria-label\": \"example query 1 permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Example Query 1\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ dig a +short events.pagerduty.com\\nevents.gslb.pagerduty.com.\\n54.244.255.45\\n54.241.36.66\\n54.245.112.46\\n\")), mdx(\"p\", null, \"In this example, you see that the Events API is accessible at the IPs 54.244.255.45, 54.241.36.66, and 54.245.112.46.\"), mdx(\"h1\", null, \"REST API\"), mdx(\"p\", null, \"To access our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://v2.developer.pagerduty.com/docs/getting-started\"\n  }), \"REST API\"), \", your system must be able to make outbound connections to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api.pagerduty.com\"), \" on TCP port 443. Our REST API only allows HTTPS connections; HTTP connections are not allowed for security.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api.pagerduty.com\"), \" usually resolve to multiple IPs as well, however these IPs will be different than the ones used for our Events API or webhooks.\"), mdx(\"h2\", {\n    \"id\": \"example-query-2\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#example-query-2\",\n    \"aria-label\": \"example query 2 permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Example Query 2\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ dig a +short api.pagerduty.com\\n54.203.252.221\\n50.112.113.201\\n50.112.113.204\\n\")), mdx(\"p\", null, \"In this example, you see that the REST API is accessible at the IPs 54.203.252.221, 50.112.113.201, and 50.112.113.204.\"), mdx(\"h1\", null, \"Webhooks\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"doc:webhooks\"\n  }), \"Webhooks\"), \" are HTTP or HTTPS calls sent from PagerDuty to your web server on the IP and port of your choosing. The current list of IPs that our webhooks are sent from can be obtained via a HTTPS GET request to the following URL:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"https://app.pagerduty.com/webhook_ips\\n\")), mdx(\"p\", null, \"The response will be a JSON-encoded list of IP addresses.\"), mdx(\"h3\", {\n    \"id\": \"example-query\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#example-query\",\n    \"aria-label\": \"example query permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Example Query\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"curl -s https://app.pagerduty.com/webhook_ips\\n[\\\"52.13.4.226\\\",\\\"54.176.87.101\\\",\\\"54.185.79.76\\\",\\\"54.201.209.177\\\",\\\"54.202.99.6\\\",\\\"54.212.55.143\\\",\\\"104.42.123.77\\\",\\\"50.18.129.59\\\",\\\"34.210.57.30\\\",\\\"34.210.242.134\\\",\\\"52.34.208.156\\\",\\\"34.202.21.89\\\",\\\"34.239.229.93\\\",\\\"34.231.45.166\\\",\\\"34.248.147.39\\\",\\\"54.77.228.115\\\",\\\"54.154.145.191\\\"]\\n\")), mdx(\"blockquote\", null, mdx(\"h3\", _extends({\n    parentName: \"blockquote\"\n  }, {\n    \"id\": \"alternate-method\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#alternate-method\",\n    \"aria-label\": \"alternate method permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Alternate Method\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" records in the domain name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webhooks.pagerduty.com\"), \" will also include a list of IP addresses from which one can expect to receive webhooks, but note that it does not cover IPs that are specific to special vendor-specific extensions, i.e. Slack, ServiceNow, MatterMost and Jira Server.\\\\n\\\\nSo, effectively, using the address records of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webhooks.pagerduty.com\"), \" can be used to validate source IPs for generic webhooks (v1 and v2) but not other types of extensions.\")), mdx(\"h2\", {\n    \"id\": \"updating-acls-to-account-for-changes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#updating-acls-to-account-for-changes\",\n    \"aria-label\": \"updating acls to account for changes permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Updating ACLs to Account for Changes\"), mdx(\"blockquote\", null, mdx(\"h3\", _extends({\n    parentName: \"blockquote\"\n  }, {\n    \"id\": \"these-ips-can-change-at-any-time-without-warning\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#these-ips-can-change-at-any-time-without-warning\",\n    \"aria-label\": \"these ips can change at any time without warning permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"These IPs can change at any time without warning\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Please be aware that the IPs above are only examples, and do not necessarily reflect the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"current\"), \" IPs in use. If we were to change IPs and your firewall policies were not updated, you will not be able to reach our API endpoints and/or you will stop receiving webhooks from PagerDuty.\\\\n\\\\nAs of this writing, there is no fixed pool or dedicated prefix in which these IP addresses reside, and whenever a host in our fleet owning a given IP address is de-provisioned, the IP address is not expected to be used again by PagerDuty.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"As of this writing, there is no fixed pool or dedicated prefix in which these IP addresses reside, and whenever a host in our fleet owning a given IP address is de-provisioned, the IP address is not expected to be used again by PagerDuty.\")), mdx(\"p\", null, \"If you are hardcoding IPs into your firewall, you can use a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/PagerDuty/PD-IP-Checker\"\n  }), \"script to receive updates\"), \" when the A records for these hostnames change, or perform lookups on the aforementioned hostnames regularly to update your configurations.\"), mdx(\"p\", null, \"If the firewall in question is an EC2 security group, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com/Deconstrained/f29fe709f8e4ff28715f7cf715e80f13\"\n  }), \"this Python script\"), \" (requires \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pypi.org/project/boto/\"\n  }), \"boto\"), \" and Python 2.7 or later to run), given an IAM secret key with adequate permissions, can automatically update the security group with the necessary IP addresses to grant access.\"), mdx(\"h1\", null, \"Jira Server Integration\"), mdx(\"p\", null, \"If you are using the new Jira extension, you will also need to add the address records of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.pagerduty.com\"), \" to any sort of whitelist that controls network egress traffic; this integration makes special API calls that go through that particular hostname.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#whitelisting-ips","title":"Whitelisting IPs"}]},{"url":"#events-apis","title":"Events APIs","items":[{"url":"#example-query-1","title":"Example Query 1"}]},{"url":"#rest-api","title":"REST API","items":[{"url":"#example-query-2","title":"Example Query 2"}]},{"url":"#webhooks","title":"Webhooks","items":[{"items":[{"url":"#example-query","title":"Example Query"}]},{"url":"#updating-acls-to-account-for-changes","title":"Updating ACLs to Account for Changes"}]},{"url":"#jira-server-integration","title":"Jira Server Integration"}]},"frontmatter":{"title":"Whitelisting IPs"}}},"pageContext":{"id":"046e205d-a913-53dd-ad35-7a93bd4873fd"}}